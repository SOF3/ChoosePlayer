<?php

/*
 * Auto-generated by libasynql-fx
 * Created from history.sql, player_log.sql
 */

declare(strict_types=1);

namespace SOFe\ChoosePlayer;

use Generator;
use SOFe\ChoosePlayer\libs\libasynql\poggit\libasynql\DataConnector;
use SOFe\ChoosePlayer\libs\await_generator\SOFe\AwaitGenerator\Await;

final class Queries{
	public function __construct(private DataConnector $conn) {}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/history.sql:42
	 * @param string $suggester
	 * @param int $accepted
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function historyCountUniqueUsageRate(string $suggester, int $accepted, ) : Generator {
		$this->conn->executeSelect("history.count-unique-usage-rate", ["suggester" => $suggester, "accepted" => $accepted, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/history.sql:17
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function historyInit() : Generator {
		$this->conn->executeChange("history.init", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/history.sql:28
	 * @param int $pk
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function historyRecordSelectedUsage(int $pk, ) : Generator {
		$this->conn->executeChange("history.record-selected-usage", ["pk" => $pk, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/history.sql:24
	 * @param string $player
	 * @param int $now
	 * @param string $suggester
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function historyRecordUsage(string $player, int $now, string $suggester, ) : Generator {
		$this->conn->executeInsert("history.record-usage", ["player" => $player, "now" => $now, "suggester" => $suggester, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/history.sql:36
	 * @param string $player
	 * @param int $now
	 * @param string $suggester
	 * @param int $accepted
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function historyTimeSinceLastPersonalUse(string $player, int $now, string $suggester, int $accepted, ) : Generator {
		$this->conn->executeSelect("history.time-since-last-personal-use", ["player" => $player, "now" => $now, "suggester" => $suggester, "accepted" => $accepted, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/player_log.sql:12
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function playerLogInit() : Generator {
		$this->conn->executeChange("player_log.init", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/player_log.sql:26
	 * @param int $pageSize
	 * @param int $page
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function playerLogRecent(int $pageSize, int $page, ) : Generator {
		$this->conn->executeSelect("player_log.recent", ["pageSize" => $pageSize, "page" => $page, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/player_log.sql:35
	 * @param string $substring
	 * @param int $pageSize
	 * @param int $page
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function playerLogSearch(string $substring, int $pageSize, int $page, ) : Generator {
		$this->conn->executeSelect("player_log.search", ["substring" => $substring, "pageSize" => $pageSize, "page" => $page, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - resources/player_log.sql:19
	 * @param string $uuid
	 * @param string $name
	 * @param int $now
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function playerLogStore(string $uuid, string $name, int $now, ) : Generator {
		$this->conn->executeInsert("player_log.store", ["uuid" => $uuid, "name" => $name, "now" => $now, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}
}